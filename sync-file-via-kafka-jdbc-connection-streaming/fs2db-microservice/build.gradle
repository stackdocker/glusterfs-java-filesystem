buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		// NOTE: You should declare only repositories that you need here
		mavenLocal()
		mavenCentral()
		maven { url "http://repo.spring.io/release" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://packages.confluent.io/maven/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
// tag::build[]
        classpath('se.transmode.gradle:gradle-docker:1.2')
// end::build[]
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
// tag::plugin[]
apply plugin: 'docker'
// end::plugin[]
apply plugin: 'java-library-distribution'

// This is used as the docker image prefix (org)
group = 'docker.io/tangfeixiong'

jar {
	baseName = 'spring-boot-sample-simple'
	version =  '0.0.0'
}

bootRun {
  systemProperties = System.properties
}

repositories {
	// NOTE: You should declare only repositories that you need here
	mavenLocal()
	mavenCentral()
	maven { url "http://repo.spring.io/release" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/snapshot" }
	maven { url "http://packages.confluent.io/maven/" }
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter")
    compile "org.apache.kafka:connect-api:0.9.0.0"
    compile "com.zendesk:maxwell:0.14.6"
    compile "org.slf4j:slf4j-api:1.7.6"
	
	testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile "junit:junit:4.11"
    testCompile "org.easymock:easymock:3.3.1"
    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-api-easymock:1.6.2"
    testRuntime "org.slf4j:slf4j-log4j12:1.7.6"	
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.6'
}

// tag::task[]
task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/fabric8-dot-io/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}
// end::task[]

archivesBaseName = "connect-file"
archivesBaseName = "connect-mysql-source"

task testJar(type: Jar) {
    classifier = 'test'
    from sourceSets.test.output
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

javadoc {
    include "**/org/wushujames/connect/*"
    include "**/org/wushujames/connect/mysql/*"
}

artifacts {
    archives testJar
}

configurations {
    archives.extendsFrom(testCompile)
}